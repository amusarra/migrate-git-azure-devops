name: Go Release

permissions:
  contents: write
  packages: write
on:
  push:
    tags:
      - "*.*.*"
      - "*.*.*-*" # include pre-release tags

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codice
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # necessario per changelog

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"

      - name: Setup GoReleaser
        uses: goreleaser/goreleaser-action@v6.4.0
        with:
          version: ~> v2
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  codesign:
    needs: goreleaser
    runs-on: windows-latest
    steps:
      - name: Scarica asset Windows dalla release
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $tag = "${{ github.ref_name }}"
          $repo = "${{ github.repository }}"
          $releaseDir = "$env:RUNNER_TEMP\release"
          New-Item -ItemType Directory -Path $releaseDir | Out-Null
          gh release download $tag --repo $repo --dir $releaseDir --pattern "*windows*"
          Get-ChildItem $releaseDir -Recurse | Format-List

      - name: Genera certificato self-signed (Code Sign)
        shell: pwsh
        run: |
          $certPath = "$env:RUNNER_TEMP\codesign.pfx"
          $certPass = "githubactions"
          $subject = "CN=GitHub Actions SelfSign, O=Antonio Musarra, C=IT"
          $cert = New-SelfSignedCertificate -Type CodeSigningCert -Subject $subject -CertStoreLocation "Cert:\CurrentUser\My" -KeyExportPolicy Exportable -KeySpec Signature
          Export-PfxCertificate -Cert $cert -FilePath $certPath -Password (ConvertTo-SecureString -String $certPass -Force -AsPlainText)
          Write-Host "Certificato generato: $certPath"

      - name: Trova percorso signtool.exe
        id: signtool
        shell: pwsh
        run: |
          $signtool = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin\" -Recurse -Filter signtool.exe | Where-Object { $_.FullName -like "*x64*" } | Select-Object -First 1
          if (-not $signtool) {
            Write-Error "signtool.exe non trovato!"
            exit 1
          }
          echo "signtool_path=$($signtool.FullName)" >> $env:GITHUB_ENV

      - name: Firma .exe (standalone e dentro zip)
        shell: pwsh
        run: |
          $certPath = "$env:RUNNER_TEMP\codesign.pfx"
          $certPass = "githubactions"
          $releaseDir = "$env:RUNNER_TEMP\release"
          $signtool = "${env:signtool_path}"

          function Sign-Exe($exePath) {
            & "$signtool" sign /fd SHA256 /f "$certPath" /p "$certPass" /tr http://timestamp.digicert.com /td SHA256 "$exePath"
          }

          # Firma .exe standalone
          Get-ChildItem $releaseDir -Filter *.exe -Recurse | ForEach-Object {
            Write-Host "Firmo $_"
            Sign-Exe $_.FullName
          }

          # Firma .exe dentro zip
          Get-ChildItem $releaseDir -Filter *.zip | ForEach-Object {
            $zip = $_.FullName
            $work = Join-Path $env:RUNNER_TEMP ([IO.Path]::GetFileNameWithoutExtension($_.Name))
            if (Test-Path $work) { Remove-Item $work -Recurse -Force }
            Expand-Archive -Path $zip -DestinationPath $work -Force

            Get-ChildItem $work -Recurse -Filter *.exe | ForEach-Object {
              Write-Host "Firmo $_"
              Sign-Exe $_.FullName
            }

            Remove-Item $zip -Force
            Compress-Archive -Path (Get-ChildItem $work) -DestinationPath $zip
          }

      - name: Carica nuovamente gli asset firmati (clobber)
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $tag = "${{ github.ref_name }}"
          $repo = "${{ github.repository }}"
          $releaseDir = "$env:RUNNER_TEMP\release"
          gh release upload $tag "$releaseDir\**\*.exe" --repo $repo --clobber
          gh release upload $tag "$releaseDir\**\*.zip" --repo $repo --clobber
          $tag = "${{ github.ref_name }}"
          $repo = "${{ github.repository }}"
          $releaseDir = "$env:RUNNER_TEMP\release"
          gh release upload $tag "$releaseDir\**\*.exe" --repo $repo --clobber
          gh release upload $tag "$releaseDir\**\*.zip" --repo $repo --clobber
